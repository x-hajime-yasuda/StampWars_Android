plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.android.gms.oss-licenses-plugin'
}

android {
    namespace 'jp.co.xpower.app.stw'
    compileSdk 33

    defaultConfig {
        applicationId "jp.co.xpower.app.stw"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        manifestPlaceholders = [MAPS_API_KEY: "${properties.getProperty('MAPS_API_KEY')}"]

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        noSign {
        signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.maps.android:android-maps-utils:2.2.0'

    implementation 'com.google.mlkit:barcode-scanning:17.1.0'
    implementation("com.jakewharton.timber:timber:5.0.1")

    def camerax_version = "1.2.2"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    implementation 'com.amplifyframework:core:2.6.0'
    implementation 'com.amplifyframework:aws-api:2.6.0'
    implementation 'com.amplifyframework:aws-auth-cognito:2.6.0'
    implementation 'com.amplifyframework:aws-datastore:2.6.0'

    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.1'
    //implementation 'com.google.android.gms:play-services-oss-licenses:16.0.2'
}


project.android.applicationVariants.all {
    tasks.findByName("${name}OssLicensesTask")?.doLast {
        addOssLicense(
                project,
                "Iconduck",
                "https://choosealicense.com/licenses/mit/?ref=iconduck.com"
        )
    }
}

// OSSライセンスを追加する
def addOssLicense(project, libName, licenseContent) {
    final String UTF_8 = "UTF-8"
    final byte[] LINE_SEPARATOR = System.getProperty("line.separator").getBytes(UTF_8)

    def dependencyOutput = new File(project.buildDir, "generated/third_party_licenses/noSign")

    def resourceOutput = new File(dependencyOutput, "/res")
    def outputDir = new File(resourceOutput, "/raw")

    // ライセンスファイル
    def licensesFile = new File(outputDir, "third_party_licenses")
    // ライセンスファイルへの書き込み前に現在の位置を保持
    def start = licensesFile.length()

    // ライセンスファイルへ書き込み
    licensesFile << licenseContent
    licensesFile << (LINE_SEPARATOR)

    // ライセンスメタデータファイルに書き込み
    def licensesMetadataFile = new File(outputDir, "third_party_license_metadata")
    licensesMetadataFile << ("${start}:${licenseContent.length()} ${libName}")
    licensesMetadataFile << (LINE_SEPARATOR)

    println("licence update!----------------------------------")
}
println("test----------------------------------------------")